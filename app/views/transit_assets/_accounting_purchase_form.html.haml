:ruby
  funding_pcnt_precision = Rails.application.config.try(:funding_pcnt_decimal_precision) || 2
- if can? :update, asset
  #grants_grant_purchases.asset-subform{style: "width:95%;"}
    = simple_form_for(asset.transam_asset,
        :as => :asset,
        :url => inventory_path(asset.transam_asset),
        :method => 'put',
        :remote => true,
        :html => {:class => 'form-vertical form-section grants_grant_purchases_form'},
        :wrapper => :vertical_form,
        :wrapper_mappings => {:check_boxes => :vertical_radio_and_checkboxes,
          :radio_buttons => :vertical_radio_and_checkboxes,
          :file => :vertical_file_input,
          :boolean => :vertical_boolean}) do |f|

      %fieldset
        %legend{style: 'font-size: medium;'} Grants
        %label#grants-error.error
        = f.simple_fields_for :grant_grant_purchases do |grant|
          = render 'transit_assets/transit_assets_grant_fields', f: grant
        .links.pull-right
          = link_to_add_association f, :grant_grant_purchases, partial: 'transit_assets/transit_assets_grant_fields', :class => 'asset-subform-action' do
            %i.fa.fa-2x.fa-plus-circle

:javascript
   $( document ).ready(function() {
    $('.grants_grant_purchases_form').validate({
      ignore: [],
      submitHandler: function(form) {
        $('.grants_grant_purchases_form input').prop('disabled', false); // re-enable any disabled fields so they'll submit
        form.trigger('submit.rails'); // submits form both as HTML or JS as defined in form data-remote
      }
    });
    if ($('.grants_grant_purchases_form input.funding-pcnt').length > 0) {
      $('.grants_grant_purchases_form input.funding-pcnt').rules( "add", {
        pcntSumsHundred_grants: true
      });
    }

  });

  $('.grants_grant_purchases_form').on('change', '.global-sourceable', function() {
    var id = $(this).attr('id');

    var other_grant_num_field = $('#' + id.substring(0, id.length-'global_sourceable'.length) + 'other_sourceable');
    if($(this).val() != '') {
      other_grant_num_field.prop('disabled', true);
      other_grant_num_field.val('');
    } else {
      other_grant_num_field.prop('disabled', false);
    }
  });

  $('body').on('change', '.grants_grant_purchases_form .purchase_cost_amount', function() {
     $('.grants_grant_purchases_form input.funding-pcnt').rules( "add", {
      pcntSumsHundred_grants: true
    });
     $('.grants_grant_purchases_form .funding-pcnt').valid();

     var pcnt = $(this).val() * 100 / parseInt($('#purchase_cost').editable('getValue')['asset[purchase_cost]']);
     
     $(this).parents('.grant-fields').find('.funding-pcnt').val(pcnt);
     $(this).parents('.grant-fields').find('.grant-purchase-pcnt.display-value').html(pcnt.toFixed(#{funding_pcnt_precision}) + " %");
  });

  $.validator.addMethod("pcntSumsHundred_grants", function(value, element) {
    // TDC is counted separately as they're "credits"
    var sum = 0;
    var tdc_sum = 0;
    var tdc_grants = JSON.parse('#{Grant.where(sourceable: FundingSource.where(funding_source_type: FundingSourceType.find_by(name: 'TDC'))).map{|f| f.to_global_id.to_s}.to_json.html_safe}')
    $('.grants_grant_purchases_form .funding-pcnt').each(function() {
      var program = $(this).parents('.grant-fields').find('.global-sourceable').val();
      if ($.inArray(program, tdc_grants) >= 0){
        tdc_sum += Number($(this).val());
      } else {
        sum += Number($(this).val());
      }
    });
    return (sum <= 100) && (tdc_sum <= 100);
  }, "Entries do not sum to 100%.");



