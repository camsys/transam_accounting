:ruby
  glas = Hash.new
  ChartOfAccount.where(organization_id: @organization_list).each do |coa|
    glas[coa.organization_id] = coa.general_ledger_accounts.ids
  end

= simple_form_for(@grant,
  :html => {:class => 'form-vertical grant_form'},
  :wrapper => :vertical_form,
  :wrapper_mappings => {:check_boxes => :vertical_radio_and_checkboxes,
    :radio_buttons => :vertical_radio_and_checkboxes,
    :file => :vertical_file_input,
    :boolean => :vertical_boolean}) do |f|

  - if @organization_list.count > 1
    = f.association :organization, :required => true, :collection => Organization.where(id: @organization_list), :label_method => 'coded_name'
  = f.input :sourceable_id, :collection => Grant.sources, :required => true, :label => Grant.label, :disabled => !@grant.new_record?
  = f.input :name, :disabled => !@grant.new_record?
  = f.input :fy_year, :collection => @fiscal_years, :label => get_fiscal_year_label

  = f.input :amount, :wrapper=> :vertical_prepend, :label => "Amount" do
    %span.input-group-addon
      %i.fa.fa-usd
    = f.input_field :amount, :class => "form-control"

  #grant_budgets.well.well-sm{style: "overflow-y:scroll; max-height:250px;"}
    %label.control-label
      %i.fa.fa-usd.fa-1-5x
      General Ledger
    .links.pull-right
      = link_to_add_association f, :grant_budgets, :class => 'btn btn-xs btn-info', data: {association_insertion_method: 'after'}, :disabled => !@grant.new_record? do
        %i.fa.fa-plus
    %label#grant_budgets-error.error
    = f.simple_fields_for :grant_budgets do |grant_budget|
      = render 'grant_budget_fields', f: grant_budget

  = f.button :submit, :class => "btn btn-primary", :id => 'grant_form_submit'

:javascript

  var glas = JSON.parse('#{glas.to_json.html_safe}');

  $(document).ready(function(){
    transam.make_same_height('.header-part');
  });

  $('body').on('change', '#grant_budgets .grant_budget_amount', function() {
    $('.grant_budget_amount').valid();
  });
  $('#grant_amount').on('change', function() {
    if ($('#grant_budgets .grant_budget_amount').length > 0) {
      $('#grant_budgets .grant_budget_amount').rules("add", {
        budgetsSum: $('#grant_amount').val()
      });
      $('.grant_budget_amount').valid();
    }
  });

  $.validator.addMethod("budgetsSum", function(value, element, params) {
    var sum = 0;
    $('.grant_budget_amount').each(function() {
        int = parseInt($(this).val())
        if (int > 0) {
          sum += int;
        }
    });

    return sum <= parseInt(params);
  }, "Sum of entries is not less than or equal to {0}.");

  // jquery validations
  $('.grant_form').validate({
    submitHandler: function(form) {
      form.submit();
    }
  });

  $('#grant_organization_id').change(function() {
    update_glas();
  });

  $('#grant_sourceable_id').change(function() {
    update_fiscal_year_range();
  });

  $('#grant_budgets').on('cocoon:after-insert', function(e, added_budget) {
    if ($('#grant_organization_id').length > 0) {
      update_glas();
    }

    added_budget.find('input.grant_budget_amount').rules("add", {
      budgetsSum: $('#grant_amount').val()
    });
  })

  function update_glas() {
    org_id = parseInt($('#grant_organization_id').val());
    var gla_ids = glas[org_id];

    //console.log(gla_ids);
    $('#grant_budgets select option').each(function() {
        var val = $(this).val();
        if((val && gla_ids != undefined && gla_ids.indexOf(parseInt(val)) > -1) || (val == "")) {
            $(this).show();
        } else {
            $(this).prop('selected', false);
            $(this).hide();
        }
    });



  }

  function update_fiscal_year_range()
  {
    var url = '#{find_fiscal_year_range_funding_sources_path}';
    if ( $('#funding_bucket_proxy_program_id').val() > 0)
    {
      $.ajax({
        url: url,
        data: {program_id: $('#grant_sourceable_id').val()},
        success: function(result){
          $('#grant_fy_year').empty();

          //Add a blank entry to the list.
          $("#grant_fy_year").append( $("<option></option>").attr("value", "").text(''));
          for(i = 0;i<result.length;i++){
            //add an option for each organizations available to the tempalte
            $("#grant_fy_year").append(
                $("<option></option>").attr("value", result[i][1]).text(result[i][0])
            );
          }
        },
        error: function (xhr, ajaxOptions, thrownError) {
          alert("We are sorry but something went wrong. " + xhr.status + " " + thrownError);
          }
        });
    }
  }
